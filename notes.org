





* Connect to a company (sandbox example):

We want all the secret bits out of the repo. 


The file locations are named in 'hackerspace_utils.py';

You'll need 

hackerspace-auth.json

which will need to have 
 [
 Which of the values are necessary to get started?
 ]


Hackerspace-auth is also referenced in the django settings.py


** OK, step by step:


# cp hackerspace-auth-example.json ../hackerspace-auth.json


Set stripe keys.


Set client ID and secret

Set the redirect to http://localhost:8000/sampleappoauth2/authCodeHandler

This should let you hit the app, authenticate, connect, and write the cache.



* Connect to a company (Production example)


You need a proper HTTPS URI for the redirect.


https://fool-quicken-about-localhost.local:8000/sampleappoauth2/authCodeHandler


QBO doesn't want you doing this to localhost.  Why? Dunno.

127.0.1.1	fool-quicken-about-localhost.local 

Then you can run the django app in SSL mode:

./manage.py runsslserver

so the URI will resolve. 


# cp hackerspace-prod-auth-example.json  ../hackerspace-auth.json

Set the stripe keys. 

Set the client ID and secret.

In settings:

+ set redirect_uri to be https.
+ set the urls not to have sandbox. 

Now go to the QBO OAUTH2 playground.

Walk through the connection and get-keys process with them.

Copy the realm, refresh token, access token, and auth code into the auth.json

And...  You're in.

Woot?


Now you need to update everyone's QBO IDs so they match the new universe.
 reconcile_customers_to_qbo.py will help.
Then you neet to update the account IDs in the payment config so they match the new universe.
 listaccounts.py will help.
Then you need to update the memberships data in hackerspace_utils so they match the new universe.
 listitems.py will help.



* Experimenting with payment applications.

140:  months 9,10,11,12

Went to match a payment, found a pledge 9/1;

Match again 9/27: matched 10/1

10/27: matched 11/1


The account of assignment should be the A/R account, not just revenue.


